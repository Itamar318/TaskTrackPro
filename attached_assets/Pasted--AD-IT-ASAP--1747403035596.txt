# אפיון מערכת סקרייפר וובי כללי – AD.IT.ASAP

מסמך זה מרכז את כלל ההגדרות, הרקע, התשתית, הדגשים והדרישות להקמת מערכת סקרייפינג כללית, דינמית, ועתירת הרחבות – המיועדת לפיתוח, תחזוקה והפעלה בסביבת Replit.

---

## 1. רקע וחזון

המערכת פותחה עבור עסקים, משרדים מקצועיים ויזמים המעוניינים באיסוף מידע חכם ואוטומטי מאתרי ווב – עם ממשק גרפי, גמישות טכנולוגית מלאה, קונפיגורציה מודולרית, והתאמה לכל פרופיל עסקי.

חזון המוצר: לאפשר לכל משתמש, גם ללא ידע תכנותי, להגדיר פרופיל מידע ולבצע שליפה מסודרת, מדויקת ויעילה מכל אתר או מערכת.

---

## 2. עקרונות עבודה מרכזיים

* **מודולריות** מלאה: כל רכיב (סקרייפר, ממשק, הגדרות, פלט) כתוב כיחידה עצמאית הניתנת להרחבה/שדרוג.
* **קונפיגורציה פתוחה**: הפרדת הלוגיקה (קוד) מההגדרות (JSON), הגדרה דינמית של שדות ופרופילים.
* **שימוש בקוד פתוח** בלבד – בלי תלות בכלים בתשלום (אלא אם נדרש).
* **סקלביליות**: התאמה לאתרים/פרופילים שונים, הרחבה קלה לשדות/פיצ'רים עתידיים.
* **ממשק משתמש נוח**: Streamlit/Flask, תמיכה בענן, אפשרות לעריכה ידנית.
* **פרטיות ואבטחת מידע**: שימוש בסודות (Secrets), שמירה על חוקיות ושליטה מלאה למשתמש.

---

## 3. תשתית טכנולוגית

* **Python 3.10+**
* **ספריות חובה:** requests, BeautifulSoup, re, cssutils/colorthief
* **ספריות אופציונליות:** Selenium, Playwright (לאתרים דינמיים)
* **ממשק:** Streamlit (מומלץ), Flask (לצורכי הרחבה)
* **ניהול קונפיגורציה:** profiles.json, fields.json
* **אפשרויות אינטגרציה:** n8n, Zapier, Make, Google Sheets API
* **ניהול סודות/משאבים:** Replit Secrets, GitHub integration

---

## 4. מבנה התיקיות והקבצים

```
/scraper/           # קוד ליבה, פונקציות חילוץ, עזרים
/config/            # profiles.json, fields.json
/app/               # app.py, requirements.txt
/tests/             # טסטים אוטומטיים
README.md           # תיעוד מרכזי
/examples/          # דוגמאות פלט
```

---

## 5. דוגמת README (תקציר)

מערכת זו מאפשרת שליפת נתונים מאתרים עסקיים לפי פרופילים מוגדרים מראש, ממשק קל לתפעול, אפשרות הרחבה בקליק, ויצוא ל-CSV/JSON. הכול מתועד, קל לשכפל ולהריץ ב-Replit.

---

## 6. קונפיגורציה ופרופילים (דוגמאות)

### profiles.json

```
{
  "law_firm": {
    "profile_name": "משרד עו"ד",
    "fields": ["שם העסק","כתובת","טלפון","דוא"ל","לוגו","צבעים דומיננטיים","תחומי עיסוק","צוות","קישורים לרשתות","שעות פעילות"],
    "mandatory_fields": ["שם העסק","כתובת","טלפון"]
  },
  "doctor": {
    "profile_name": "מרפאה/רופא",
    "fields": ["שם העסק","תחום התמחות","כתובת","טלפון","דוא"ל","רופאים","שעות קבלה","קישורים לרשתות"],
    "mandatory_fields": ["שם העסק","טלפון"]
  },
  "business": {
    "profile_name": "עסק כללי",
    "fields": ["שם העסק","תחום פעילות","כתובת","טלפון","דוא"ל","לוגו","שעות פתיחה","קישורים לרשתות"],
    "mandatory_fields": ["שם העסק"]
  },
  "custom": {"profile_name": "מותאם אישית","fields": [],"mandatory_fields": []}
}
```

### fields.json

```
[
  {"field": "שם העסק","type": "string","example": "עו"ד חיים כהן ושות'","regex": null,"profiles": ["law_firm","doctor","business"]},
  {"field": "טלפון","type": "string","example": "+972-3-5555555","regex": "(?:\+972[- ]?|0)[2-9]{1}-?\d{7}","profiles": ["law_firm","doctor","business"]},
  {"field": "דוא"ל","type": "email","example": "office@lawfirm.co.il","regex": "[\w\.-]+@[\w\.-]+\.[a-z]{2,}","profiles": ["law_firm","doctor","business"]},
  {"field": "לוגו","type": "url","example": "https://site.com/logo.png","regex": null,"profiles": ["law_firm","business"]},
  {"field": "צוות","type": "array","example": [{"שם": "עו"ד רונית לוי", "תפקיד": "שותפה", "דוא"ל": "ronit@lawfirm.co.il"}],"regex": null,"profiles": ["law_firm"]}
]
```

---

## 7. דרישות וכלי פיתוח ב-Replit (MCP)

**חובה:**

* Python 3.10+
* pip enabled
* Web server פעיל (Streamlit/Flask)
* גישה ל-secrets (API keys, Tokens)
* GitHub integration

**אופציונלי/מומלץ:**

* Always-On (Boosted plan)
* חיבור ל-n8n, Zapier, Make, Google Sheets
* גישה ל-Webhooks/REST API endpoints
* שימוש ב-Replit DB או כל אחסון נוסף
* Deployment חי לשיתוף דמואים ללקוחות

---

## 8. עקרונות יעילות לצוות פיתוח מקצועי

* **דוקומנטציה מלאה:** כל פונקציה/מודול עם docstring, README מעודכן, דוגמאות קוד בכל שלב.
* **Git Workflow:** ענפים (Branches) לפי פיצ'ר, Pull Requests, בדיקות אוטומטיות לפני מיזוג.
* **Continuous Integration:** בדיקות ריצה אוטומטיות (unit/integration tests) על כל PR.
* **פריסה הדרגתית:** סביבת dev/staging/prod, קונפיגורציה נפרדת לכל שלב.
* **שימוש בסודות:** כל מידע רגיש נשמר אך ורק בסביבה בטוחה (Replit Secrets).
* **שימוש בכלי לוג/ניטור:** לוגים זמינים לכל הרצה (קבצים/DB), תיעוד כל תקלה או הפעלה חריגה.
* **פגישות צוות קצרות:** עדכון שוטף, ניהול משימות ב-issue tracker, סיעור מוחות פתוח.
* **כתיבת קוד קריא ומודולרי:** חלוקה לקבצים ולפונקציות קצרות, שימוש ב-type hints והערות.
* **מתודולוגיה אג'ילית:** תכנון ספרינטים קצרים, מענה מהיר, אוטומציה של משימות רפטטיביות.

---

## 9. הרחבות עתידיות

* תמיכה ב-chatbots/AI לבחירת שדות בזמן אמת
* זיהוי חכם של מבנה אתרים ומילוי אוטומטי של שדות (AI Assistant)
* חיבור לבקרות איכות, דירוג תוצאות והשלמה ידנית/חצי-אוטומטית
* תמיכה ב-bulk scraping מרשימות ענק, ניהול אנליטיקות ודו"חות
* פרסום תיעוד ציבורי, דשבורד שימוש, דוגמאות בקהילה

---

## 10. תמצית

המערכת מעניקה פתרון סקלבילי, דינמי ומאובטח, עם דגש על תפעול חכם, תיעוד מקצועי, והרגלי עבודה כמו בסטארטאפ/צוות פיתוח מוביל. כל שלב נועד להבטיח שגם בפרויקט קטן – ההטמעה והתחזוקה יהיו ברמה של מוצר בינלאומי.

---

*AD.IT.ASAP – מייצרים אוטומציה והנגשה עסקית. כל שאלה, פנייה או הערה – אנחנו כאן לעזור!*
